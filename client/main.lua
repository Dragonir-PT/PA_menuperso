---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by dragonir.
--- DateTime: 30/08/2020 20:53
---


---Load ESX
ESX = nil

---local
local Menu = {
    Inventory = {
        maxWeight = 0,
        weight = 0,
        itemSelected = {},
        itemQuantity = 0
    },
    Loadout = {
        weaponSelected = {},
        ammo = 0
    },
    Wallet = {
        List = {_U('give'), _U('drop')},
        Bill = {},
        Paper = {
            List = {_U('show_idcard'), _U('look_idcard'), _U('show_licence'), _U('look_licence'), _U('show_weapon'), _U('look_weapon')},
        }
    },
    CarKey = {},
    CarKeySelected = {},
    HUD = {
        State = {_U('show_hud'), _U('hide_hud'), _U('cinematic_hud')},
    },
    GPS = {
        Data = {},
    },
    Vehicle = {
        Info = {
            Engine = {
                State = nil,
                ActualState = {_U('perfect'), _U('danger'), _U('critical'), _U('dead')},
                Data = nil
            },
            Body = {
                State = nil,
                ActualState = {_U('perfect'), _U('danger'), _U('critical'), _U('dead')},
                Data = nil
            },
            Tank = {
                State = nil,
                ActualState = {_U('perfect'), _U('danger'), _U('critical'), _U('dead')},
                Data = nil
            },
        },
        Door = {
            List = {_U('front_left'), _U('front_right'), _U('back_left'), _U('back_right')},
            State = {
                FrontLeft = false,
                FrontRight = false,
                BackLeft = false,
                BackRight = false,
                Hood = false,
                Trunk = false
            }
        },
        Window = {
            List = {_U('front_left'), _U('front_right'), _U('back_left'), _U('back_right')},
            State = {
                FrontLeft = false,
                FrontRight = false,
                BackLeft = false,
                BackRight = false,
            }
        }
    },
    Settings = {
        color = {
            red = {},
            indexRed = 1,
            green = {},
            indexGreen = 1,
            blue = {},
            indexBlue = 1,
            alpha = {},
            indexAlpha = 1
        },
        size = {"NativeUI", "RageUI"},
        indexSize = 1,
        sizeCustom = 0.5
    },
    admin = {
        noClip = false,
        godMode = false,
        ghostMode = false,
        coords = false,
        showName
    }
}
for i=0, 255, 1 do
    table.insert(Menu.Settings.color.red, i)
    table.insert(Menu.Settings.color.green, i)
    table.insert(Menu.Settings.color.blue, i)
    table.insert(Menu.Settings.color.alpha, i)
end
local playerRetuned = {}
local societymoney, societymoney2 = nil, nil
local jobList = {}
local selectedJob = {}
local grade = {}
local playergroup
local menuParam = {}
if GetResourceKvpString("menuParam") ~= nil then menuParam = json.decode(GetResourceKvpString("menuParam")) print(GetResourceKvpString("menuParam")) else print("Aucun paramètre trouver") end

Citizen.CreateThread(function()
    while ESX == nil do
        Citizen.Wait(1000)
        TriggerEvent('esx:getSharedObject', function(obj) ESX = obj end)
        while ESX.GetPlayerData().job == nil do
            Citizen.Wait(10)
        end
        Menu.Inventory.maxWeight = ESX.PlayerData.maxWeight
        for i=1, #Config.GPS, 1 do
            table.insert(Menu.GPS.Data, Config.GPS[i].label)
        end
    end
end)

RegisterNetEvent('esx:playerLoaded')
AddEventHandler('esx:playerLoaded', function(xPlayer)
    ESX.PlayerData = xPlayer
end)

RegisterNetEvent('esx:setJob')
AddEventHandler('esx:setJob', function(job)
    ESX.PlayerData.job = job
    RefreshMoney()
end)

RegisterNetEvent('esx:setJob2')
AddEventHandler('esx:setJob2', function(job)
    ESX.PlayerData.job2 = job
    RefreshMoney2()
end)

---Menu creator
RMenu.Add('main', 'menuperso', RageUI.CreateMenu(Config.ServerName, "Menu personnel"))

RMenu.Add('submenu', 'me', RageUI.CreateSubMenu(RMenu:Get('main', 'menuperso'), Config.ServerName, _U('me')))

RMenu.Add('submenu', 'inventory', RageUI.CreateSubMenu(RMenu:Get('submenu', 'me'), Config.ServerName, _U('inventory')))
RMenu.Add('submenu', 'invaction', RageUI.CreateSubMenu(RMenu:Get('submenu', 'inventory'), Config.ServerName, _U('what_do')))
RMenu.Add('submenu', 'give', RageUI.CreateSubMenu(RMenu:Get('submenu', 'invaction'), Config.ServerName, _U('give')))

RMenu.Add('submenu', 'weapon', RageUI.CreateSubMenu(RMenu:Get('submenu', 'me'), Config.ServerName, _U('weapon')))
RMenu.Add('submenu', 'weaponaction', RageUI.CreateSubMenu(RMenu:Get('submenu', 'weapon'), Config.ServerName, _U('what_do')))
RMenu.Add('submenu', 'giveweapon', RageUI.CreateSubMenu(RMenu:Get('submenu', 'weaponaction'), Config.ServerName, "Personne proche de vous"))

RMenu.Add('submenu', 'wallet', RageUI.CreateSubMenu(RMenu:Get('submenu', 'me'), Config.ServerName, _U('wallet')))

RMenu.Add('submenu', 'bill', RageUI.CreateSubMenu(RMenu:Get('submenu', 'wallet'), Config.ServerName, _U('bill')))
if Config.useDoubleKey then
    RMenu.Add('submenu', 'carkey', RageUI.CreateSubMenu(RMenu:Get('submenu', 'me'), Config.ServerName, "Clés"))
    RMenu.Add('submenu', 'keyaction', RageUI.CreateSubMenu(RMenu:Get('submenu', 'carkey'), Config.ServerName, _U('what_do')))
end
RMenu.Add('submenu', 'vehicle', RageUI.CreateSubMenu(RMenu:Get('main', 'menuperso'), Config.ServerName, _U('vehicle_manager')))

RMenu.Add('submenu', 'vehinfo', RageUI.CreateSubMenu(RMenu:Get('submenu', 'vehicle'), Config.ServerName, _U('info_veh')))

RMenu.Add('submenu', 'society', RageUI.CreateSubMenu(RMenu:Get('main', 'menuperso'), Config.ServerName, _U('society_manager')))

if Config.doubleJob then
    RMenu.Add('submenu', 'gang', RageUI.CreateSubMenu(RMenu:Get('main', 'menuperso'), Config.ServerName, _U('gang_manager')))
end

RMenu.Add('submenu', 'settings', RageUI.CreateSubMenu(RMenu:Get('main', 'menuperso'), Config.ServerName, _U('settings')))
RMenu:Get('submenu', 'settings').EnableMouse = true

RMenu.Add('submenu', 'admin', RageUI.CreateSubMenu(RMenu:Get('main', 'menuperso'), Config.ServerName, _U('admin')))
RMenu.Add('submenu', 'admintp', RageUI.CreateSubMenu(RMenu:Get('submenu', 'admin'), Config.ServerName, _U('tp')))
RMenu.Add('submenu', 'adminplayer', RageUI.CreateSubMenu(RMenu:Get('submenu', 'admin'), Config.ServerName, _U('player')))
RMenu.Add('submenu', 'adminitem', RageUI.CreateSubMenu(RMenu:Get('submenu', 'admin'), Config.ServerName, _U('item_list')))
RMenu.Add('submenu', 'adminjob', RageUI.CreateSubMenu(RMenu:Get('submenu', 'admin'), Config.ServerName, _U('job_list')))
RMenu.Add('submenu', 'adminjobgrade', RageUI.CreateSubMenu(RMenu:Get('submenu', 'adminjob'), Config.ServerName, _U('grade_list')))
if Config.doubleJob then
    RMenu.Add('submenu', 'admingang', RageUI.CreateSubMenu(RMenu:Get('submenu', 'admin'), Config.ServerName, _U('gang_list')))
    RMenu.Add('submenu', 'adminganggrade', RageUI.CreateSubMenu(RMenu:Get('submenu', 'admingang'), Config.ServerName, _U('grade_list')))
end
RMenu.Add('submenu', 'admincar', RageUI.CreateSubMenu(RMenu:Get('submenu', 'admin'), Config.ServerName, _U('vehicle')))
RMenu.Add('submenu', 'adminmisc', RageUI.CreateSubMenu(RMenu:Get('submenu', 'admin'), Config.ServerName, _U('other')))

---Key manager
Keys.Register('F5', 'open_menuperso', 'Menu Personnel', function()
    if Config.TitlePlayerName then
        ESX.TriggerServerCallback('PA_menuperso:getName', function(name)
            for k,_ in pairs(RMenu:GetType('main')) do
                RMenu:GetType('main')[k].Menu:SetTitle(name)
            end
            for k,_ in pairs(RMenu:GetType('submenu')) do
                RMenu:GetType('submenu')[k].Menu:SetTitle(name)
            end
        end)
    end
    ESX.TriggerServerCallback('PA_menuperso:getUsergroup', function(group)
        playergroup = group
    end)
    if menuParam[1] ~= nil or menuParam[1] == '[]' then
        for k,_ in pairs(RMenu:GetType('main')) do
            RMenu:GetType('main')[k].Menu:SetRectangleBanner(menuParam[1].color.r, menuParam[1].color.g, menuParam[1].color.b, menuParam[1].color.a)
            RMenu:GetType('main')[k].Menu:SetStyleSize(menuParam[1].size)
        end
        for k,_ in pairs(RMenu:GetType('submenu')) do
            RMenu:GetType('submenu')[k].Menu:SetRectangleBanner(menuParam[1].color.r, menuParam[1].color.g, menuParam[1].color.b, menuParam[1].color.a)
            RMenu:GetType('submenu')[k].Menu:SetStyleSize(menuParam[1].size)
        end
    end
    RageUI.Visible(RMenu:Get('main', 'menuperso'), not RageUI.Visible(RMenu:Get('main', 'menuperso')))
end)

--[[Keys.Register('F6', 'open_job', "Menu métier", function()
    if ESX.PlayerData.job.name == 'sheriff' then
        TriggerEvent('PT_menuperso:openSheriff')
    elseif ESX.PlayerData.job.name == 'ambulance' then
        TriggerEvent('PT_menuperso:openAmbulance')
    elseif ESX.PlayerData.job.name == 'mechanic' then
        TriggerEvent('PT_menuperso:openMecano')
    elseif ESX.PlayerData.job.name == 'yellowjack' then
        TriggerEvent('PT_menuperso:mobileyellowjack')
    elseif ESX.PlayerData.job.name == 'farm' then
        TriggerEvent('PT_menuperso:farmMobile')
    else
        Visual.Popup(_U('job_not_register')
    end
end)]]

--[[Keys.Register('F11', 'openAnimal', "Menu animal", function()
    TriggerEvent('PT_menuperso:openAnimal')
end)

Keys.Register('F1', 'openMobile', "Téléphone", function()
    TriggerEvent('PT_menuperso:openPhone')
end)

Keys.Register('F2', 'openRadio', "Radio", function()
    TriggerEvent('PT_menuperso:openRadio')
end)]]

Keys.Register('Y', 'car_lock', "Ouvrir / fermer véhicule", function()
    TriggerEvent('PT_menuperso:carLock')
end)

Keys.Register('U', 'open_chest', "Coffre", function()
    TriggerEvent('PT_menuperso:openVehChest')
end)

Keys.Register('OEM_3', 'handup', "Lever les mains", function()
    TriggerEvent('PT_menuperso:handsup')
end)

Keys.Register('G', 'ragdoll', "Ragdoll", function()
    TriggerEvent('PT_menuperso:ragdoll')
end)

Keys.Register('X', 'cancel_anim', "Arrêter animation", function()
    TriggerEvent('PT_menuperso:cancelAnim')
end)

Keys.Register('F3', 'voice_volum', "Varier la voix", function()
    TriggerEvent('PT_menuperso:VoiceVolum', true)
end)

---Menu content
Citizen.CreateThread(function()
    while true do
        Citizen.Wait(0)
        RageUI.IsVisible(RMenu:Get('main', 'menuperso'), function()
            RageUI.Button(_U('me'), nil, {}, true, {}, RMenu:Get('submenu', 'me'))
            RageUI.List(_U('hud'), Menu.HUD.State, Menu.HUD.index or 1, nil, {}, true, {
                onListChange = function(index)
                    Menu.HUD.index = index
                end,
                onSelected = function(index)
                    if index == 1 then
                        setHUD('showHUD')
                    elseif index == 2 then
                        setHUD('hideHUD')
                    elseif index == 3 then
                        setHUD('cinematique')
                    end
                end
            })
            RageUI.Button(_U('anim'), nil, {}, true, {
                onSelected = function()
                    RageUI.CloseAll()
                    TriggerEvent('dp:RecieveMenu')
                end
            })
            RageUI.List(_U('gps'), Menu.GPS.Data, Menu.GPS.index or 1, nil, {}, true, {
                onListChange = function(index)
                    Menu.GPS.index = index
                    if index > #Config.GPS then
                        Menu.GPS.index = 1
                    end
                end,
                onSelected = function(index)
                    Visual.Popup(_U('gps_notif',Config.GPS[index].label))
                    if index == 1 then
                        DeleteWaypoint()
                    else
                        SetNewWaypoint(Config.GPS[index].coords)
                    end
                end
            })
            if IsPedSittingInAnyVehicle(GetPlayerPed(-1)) then
                if (GetPedInVehicleSeat(GetVehiclePedIsIn(GetPlayerPed(-1), false), -1) == GetPlayerPed(-1)) then
                    RageUI.Button(_U('vehicle_manager'), nil, {}, true, {}, RMenu:Get('submenu', 'vehicle'))
                end
            end
            if ESX.PlayerData.job.grade_name == 'boss' then
                RageUI.Button(_U('society_manager'), nil, {RightLabel = ESX.PlayerData.job.label}, true, {}, RMenu:Get('submenu', 'society'))
            end
            if Config.doubleJob then
                if ESX.PlayerData.job2.grade_name == 'boss' then
                    RageUI.Button(_U('gang_manager'), nil, {RightLabel = ESX.PlayerData.job2.label}, true, {}, RMenu:Get('submenu', 'gang'))
                end
            end
            RageUI.Button(_U('save_pos'), nil, {}, true, {
                onSelected = function()
                    TriggerServerEvent('PA_menuperso:SavePos')
                    Visual.Popup(_U('notif_save'))
                end
            })
            RageUI.Button(_U('settings'), nil, {}, true, {}, RMenu:Get('submenu', 'settings'))
            if playergroup == 'mod' or playergroup == 'admin' or playergroup == 'superadmin' or playergroup == 'owner' then
                RageUI.Button(_U('admin'), nil, {}, true, {}, RMenu:Get('submenu', 'admin'))
            end
        end)

        RageUI.IsVisible(RMenu:Get('submenu', 'me'), function()
            RageUI.Button(_U('inventory'), nil, {}, true, {}, RMenu:Get('submenu', 'inventory'))
            RageUI.Button(_U('weapon'), nil, {}, true, {}, RMenu:Get('submenu', 'weapon'))
            RageUI.Button(_U('wallet'), nil, {}, true, {}, RMenu:Get('submenu', 'wallet'))
            if Config.useDoubleKey then
                RageUI.Button(_U('car_key'), nil, {}, true, {
                    onSelected = function()
                        ESX.TriggerServerCallback('PA_menuperso:getKey', function(key)
                            Menu.CarKey = key
                        end)
                    end
                }, RMenu:Get('submenu', 'carkey'))

            end
        end)

        RageUI.IsVisible(RMenu:Get('submenu', 'inventory'), function()
            ESX.PlayerData = ESX.GetPlayerData()
            ESX.TriggerServerCallback('PA_menuperso:getPlayerWeight', function(weight)
                Menu.Inventory.weight = weight/1000
            end)
            for i=1, #ESX.PlayerData.inventory, 1 do
                local inventory = ESX.PlayerData.inventory[i]
                if inventory.count > 0 then
                    RageUI.Button(_U('inv_label', inventory.label,inventory.count), _U('inv_desc', Menu.Inventory.weight, Menu.Inventory.maxWeight/1000), {}, true, {
                        onSelected = function()
                            Menu.Inventory.itemSelected = inventory
                        end
                    }, RMenu:Get('submenu', 'invaction'))
                end
            end
        end)
        RageUI.IsVisible(RMenu:Get('submenu', 'invaction'), function()
            if Menu.Inventory.itemSelected.count == 0 then
                RageUI.GoBack()
                ESX.TriggerServerCallback('PA_menuperso:getPlayerWeight', function(weight)
                    Menu.Inventory.weight = weight
                end)
            end
            RageUI.Button(_U('use'), nil, {}, true, {
                onSelected = function()
                    if Menu.Inventory.itemSelected.usable then
                        TriggerServerEvent('esx:useItem', Menu.Inventory.itemSelected.name)
                        Menu.Inventory.itemSelected.count = Menu.Inventory.itemSelected.count - 1
                    else
                        Visual.Popup(Menu.Inventory.itemSelected.label .. " n'est pas utilisable")
                    end
                end
            })
            RageUI.Button(_U('give'), nil, {}, true, {}, RMenu:Get('submenu', 'give'))
            RageUI.Button(_U('drop'), nil, {RightBadge = RageUI.BadgeStyle.Alert}, true, {
                onSelected = function()
                    if Menu.Inventory.itemSelected.canRemove == 1 then
                        if not IsPedSittingInAnyVehicle(plyPed) then
                            local post, quantity = CheckQuantity(KeyboardInput(_U('quantity'), '', 7))
                            if post then
                                if quantity ~= nil or quantity > 0 and quantity <= Menu.Inventory.itemSelected.count then
                                    TriggerServerEvent('esx:removeInventoryItem', 'item_standard', Menu.Inventory.itemSelected.name, quantity)
                                    RageUI.CloseAll()
                                    currentWeight = 0
                                    Citizen.Wait(100)
                                else
                                    Visual.Popup(_U('invalid_quantity'))
                                end
                            else
                                Visual.Popup(_U('invalid_entry'))
                            end
                        else
                            Visual.Popup(_U('drop_car', Menu.Inventory.itemSelected.label))
                        end
                    else
                        Visual.Popup(_U('cant_drop', Menu.Inventory.itemSelected.label))
                    end
                end
            })
        end)
        RageUI.IsVisible(RMenu:Get('submenu', 'give'), function()
            local playersNearby = ESX.Game.GetPlayersInArea(GetEntityCoords(PlayerPedId()), 3.0)
            local invCount = {}
            for i=1, Menu.Inventory.itemSelected.count, 1 do
                table.insert(invCount, i)
            end
            RageUI.List(_U('give_label', Menu.Inventory.itemSelected.label, Menu.Inventory.itemSelected.count), invCount, Menu.Inventory.index or 1, nil, {}, true, {
                onListChange = function(index)
                    Menu.Inventory.index = index
                end,
                onSelected = function()
                    local post, quantity = CheckQuantity(KeyboardInput(_U('amount'), '', 7))
                    if post then
                        if quantity > 0 and quantity <= Menu.Inventory.itemSelected.count and quantity ~= nil then
                            Menu.Inventory.itemIndex[Menu.Inventory.itemSelected.name] = quantity
                        else
                            Visual.Popup(_U('invalid_quantity'))
                        end
                    else
                        Visual.Popup(_U('invalid_entry'))
                    end
                end
            })
            if #playersNearby > 0 then
                for _=1, #playersNearby, 1 do
                    if Menu.Inventory.itemIndex[Menu.Inventory.itemSelected.name] > 0 and Menu.Inventory.itemIndex[Menu.Inventory.itemSelected.name] ~= nil then
                        local players = {}
                        for _,playerNearby in ipairs(playersNearby) do
                            players[GetPlayerServerId(playerNearby)] = true
                        end
                        ESX.TriggerServerCallback('esx:getPlayerNames', function(returnedPlayers)
                            playerRetuned = returnedPlayers
                        end, players)
                        for playerId,playerName in pairs(playerRetuned) do
                            RageUI.Button(playerName, nil, {}, true, {
                                onSelected = function()
                                    if Menu.Inventory.itemSelected.rare == 0 then
                                        local selectedPlayer = GetPlayerFromServerId(playerId)
                                        local selectedPlayerPed = GetPlayerPed(selectedPlayer)
                                        if not IsPedSittingInAnyVehicle(selectedPlayerPed) then
                                            if Menu.Inventory.itemIndex[Menu.Inventory.itemSelected.name] ~= nil and Menu.Inventory.itemSelected.count > 0 then
                                                TriggerServerEvent('esx:giveInventoryItem', playerId, 'item_standard', Menu.Inventory.itemSelected.name, Menu.Inventory.index)
                                                RageUI.CloseAll()
                                            else
                                                Visual.Popup(_U('invalid_quantity'))
                                            end
                                        else
                                            Visual.Popup(_U('give_car', Menu.Inventory.itemSelected.label))
                                        end
                                    else
                                        Visual.Popup(_U('cant_give'))
                                    end
                                end
                            })
                        end
                    end
                end
            else
                RageUI.Button(_U('nobody'), nil, {}, true, {})
            end
        end)

        RageUI.IsVisible(RMenu:Get('submenu', 'weapon'), function()
            local weaponList = ESX.GetWeaponList()
            for i=1, #weaponList, 1 do
                local weaponHash = GetHashKey(weaponList[i].name)
                local ammo = GetAmmoInPedWeapon(PlayerPedId(), weaponHash)
                if HasPedGotWeapon(PlayerPedId(), weaponHash, false) and weaponList[i].name ~= 'WEAPON_UNARMED' then
                    RageUI.Button(weaponList[i].label.." ("..ammo..")", nil, {}, true, {
                        onSelected = function()
                            Menu.Loadout.weaponSelected = weaponList[i]
                            Menu.Loadout.ammo = ammo
                        end
                    }, RMenu:Get('submenu', 'weaponaction'))
                end
            end
        end)
        RageUI.IsVisible(RMenu:Get('submenu', 'weaponaction'), function()
            local desc = Menu.Loadout.weaponSelected.label.." ("..Menu.Loadout.ammo..")"
            RageUI.Button(_U('give'), desc, {}, true, {
                onSelected = function()
                    local closestPlayer, closestDistance = ESX.Game.GetClosestPlayer()
                    if closestPlayer ~= -1 and closestDistance < 3.0 then
                        TriggerServerEvent('esx:giveInventoryItem', GetPlayerServerId(closestPlayer), 'item_weapon', Menu.Loadout.weaponSelected.name, Menu.Loadout.ammo)
                    else
                        Visual.Popup(_U('nobody'))
                    end
                end
            }, RMenu:Get('submenu', 'giveweapon'))
            RageUI.Button(_U('drop'), desc, {RightBadge = RageUI.BadgeStyle.Alert}, true, {
                onSelected = function()
                    if not IsPedSittingInAnyVehicle(PlayerPedId()) then
                        TriggerServerEvent('esx:removeInventoryItem', 'item_weapon', Menu.Loadout.weaponSelected.name, Menu.Loadout.ammo)
                        RageUI.CloseAll()
                    else
                        Visual.Popup(_U('drop_car', Menu.Loadout.weaponSelected.label))
                    end
                end
            })
        end)

        RageUI.IsVisible(RMenu:Get('submenu', 'wallet'), function()
            ESX.PlayerData = ESX.GetPlayerData()
            RageUI.Button(_U('job_label', ESX.PlayerData.job.label, ESX.PlayerData.job.grade_label), nil, {}, true, {})
            if Config.doubleJob then
                RageUI.Button(_U('gang_label', ESX.PlayerData.job2.label, ESX.PlayerData.job2.grade_label), nil, {}, true, {})
            end
            for i=1, #ESX.PlayerData.accounts, 1 do
                if ESX.PlayerData.accounts[i].name == 'money' then
                    RageUI.List(_U('money_label', ESX.PlayerData.accounts[i].label, ESX.PlayerData.accounts[i].money), Menu.Wallet.List, Menu.Wallet.indexMoney or 1, nil, {}, true, {
                        onListChange = function(index)
                            Menu.Wallet.indexMoney = index
                        end,
                        onSelected = function(index)
                            if index == 1 then
                                local post, quantity = CheckQuantity(KeyboardInput(_U('quantity'), '', 8))
                                if post then
                                    local closestPlayer, closestDistance = ESX.Game.GetClosestPlayer()
                                    if closestDistance ~= -1 and closestDistance <= 3 then
                                        local closestPed = GetPlayerPed(closestPlayer)
                                        if not IsPedSittingInAnyVehicle(closestPed) then
                                            TriggerServerEvent('esx:giveInventoryItem', GetPlayerServerId(closestPlayer), 'item_account', ESX.PlayerData.accounts[i].name, quantity)
                                            RageUI.CloseAll()
                                        else
                                            Visual.Popup(_U('give_car', ESX.PlayerData.accounts[i].label))
                                        end
                                    else
                                        Visual.Popup(_U('nobody'))
                                    end
                                else
                                    Visual.Popup(_U('invalid_quantity'))
                                end
                            elseif index == 2 then
                                local post, quantity = CheckQuantity(KeyboardInput(_U('quantity'), '', 8))
                                if post then
                                    if not IsPedSittingInAnyVehicle(plyPed) then
                                        TriggerServerEvent('esx:removeInventoryItem', 'item_account', ESX.PlayerData.accounts[i].name, quantity)
                                        RageUI.CloseAll()
                                    else
                                        Visual.Popup(_U('drop_car', ESX.PlayerData.accounts[i].label))
                                    end
                                else
                                    Visual.Popup(_U('invalid_quantity'))
                                end
                            end
                        end
                    })
                elseif ESX.PlayerData.accounts[i].name == 'black_money' then
                    RageUI.List(_U('black_label', ESX.PlayerData.accounts[i].label, ESX.PlayerData.accounts[i].money), Menu.Wallet.List, Menu.Wallet.indexBlack or 1, nil, {}, true, {
                        onListChange = function(index)
                            Menu.Wallet.indexBlack = index
                        end,
                        onSelected = function(index)
                            if index == 1 then
                                local post, quantity = CheckQuantity(KeyboardInput(_U('quantity'), '', 8))
                                if post then
                                    local closestPlayer, closestDistance = ESX.Game.GetClosestPlayer()
                                    if closestDistance ~= -1 and closestDistance <= 3 then
                                        local closestPed = GetPlayerPed(closestPlayer)
                                        if not IsPedSittingInAnyVehicle(closestPed) then
                                            TriggerServerEvent('esx:giveInventoryItem', GetPlayerServerId(closestPlayer), 'item_account', ESX.PlayerData.accounts[i].name, quantity)
                                            RageUI.CloseAll()
                                        else
                                            Visual.Popup(_U('give_car', ESX.PlayerData.accounts[i].label))
                                        end
                                    else
                                        Visual.Popup(_U('nobody'))
                                    end
                                else
                                    Visual.Popup(_U('invalid_quantity'))
                                end
                            elseif index == 2 then
                                local post, quantity = CheckQuantity(KeyboardInput(_U('quantity'), '', 8))
                                if post then
                                    if not IsPedSittingInAnyVehicle(plyPed) then
                                        TriggerServerEvent('esx:removeInventoryItem', 'item_account', ESX.PlayerData.accounts[i].name, quantity)
                                        RageUI.CloseAll()
                                    else
                                        Visual.Popup(_U('drop_car', ESX.PlayerData.accounts[i].label))
                                    end
                                else
                                    Visual.Popup(_U('invalid_quantity'))
                                end
                            end
                        end
                    })
                end
            end
            RageUI.Button(_U('bill'), nil, {}, true, {
                onSelected = function()
                    ESX.TriggerServerCallback('PA_menuperso:Bill_getBills', function(bills)
                        Menu.Wallet.Bill = bills
                    end)
                end
            }, RMenu:Get('submenu', 'bill'))
            if Config.idCard then
                RageUI.List(_U('paper'), Menu.Wallet.Paper.List, Menu.Wallet.Paper.index or 1, nil, {}, true, {
                    onListChange = function(index)
                        Menu.Wallet.Paper.index = index
                    end,
                    onSelected = function(index)
                        if index == 1 then
                            local closestPlayer, closestDistance = ESX.Game.GetClosestPlayer()

                            if closestDistance ~= -1 and closestDistance <= 3.0 then
                                TriggerServerEvent('jsfour-idcard:open', GetPlayerServerId(PlayerId()), GetPlayerServerId(closestPlayer))
                            else
                                Visual.Popup(_U('nobody'))
                            end
                        elseif index == 2 then
                            TriggerServerEvent('jsfour-idcard:open', GetPlayerServerId(PlayerId()), GetPlayerServerId(PlayerId()))
                        elseif index == 3 then
                            local closestPlayer, closestDistance = ESX.Game.GetClosestPlayer()

                            if closestDistance ~= -1 and closestDistance <= 3.0 then
                                TriggerServerEvent('jsfour-idcard:open', GetPlayerServerId(PlayerId()), GetPlayerServerId(closestPlayer), 'driver')
                            else
                                Visual.Popup(_U('nobody'))
                            end
                        elseif index == 4 then
                            TriggerServerEvent('jsfour-idcard:open', GetPlayerServerId(PlayerId()), GetPlayerServerId(PlayerId()), 'driver')
                        elseif index == 5 then
                            local closestPlayer, closestDistance = ESX.Game.GetClosestPlayer()

                            if closestDistance ~= -1 and closestDistance <= 3.0 then
                                TriggerServerEvent('jsfour-idcard:open', GetPlayerServerId(PlayerId()), GetPlayerServerId(closestPlayer), 'weapon')
                            else
                                Visual.Popup(_U('nobody'))
                            end
                        elseif index == 6 then
                            TriggerServerEvent('jsfour-idcard:open', GetPlayerServerId(PlayerId()), GetPlayerServerId(PlayerId()), 'weapon')
                        end
                    end
                })
            end
        end)

        RageUI.IsVisible(RMenu:Get('submenu', 'bill'), function()
            for i=1, #Menu.Wallet.Bill, 1 do
                RageUI.Button(Menu.Wallet.Bill[i].label, nil, {RightLabel = Menu.Wallet.Bill[i].amount.."$"}, true, {
                    onSelected = function()
                        ESX.TriggerServerCallback('esx_billing:payBill', function()
                            ESX.TriggerServerCallback('PA_menuperso:Bill_getBills', function(bills)
                                Menu.Wallet.Bill = bills
                            end)
                        end, Menu.Wallet.Bill[i].id)
                    end
                })
            end
        end)

        if Config.useDoubleKey then
            RageUI.IsVisible(RMenu:Get('submenu', 'carkey'), function()
                for i=1, #Menu.CarKey, 1 do
                    RageUI.Button(Menu.CarKey[i].label.." - "..Menu.CarKey[i].value, nil, {}, true, {
                        onSelected = function()
                            Menu.CarKeySelected = Menu.CarKey[i].value
                        end
                    }, RMenu:Get('submenu', 'keyaction'))
                end
            end)
            RageUI.IsVisible(RMenu:Get('submenu', 'keyaction'), function()
                local player, distance = ESX.Game.GetClosestPlayer()
                local playerPed = GetPlayerPed(-1)
                local coords    = GetEntityCoords(playerPed, true)
                local vehicle = GetClosestVehicle(coords.x, coords.y, coords.z, 7.0, 0, 71)
                local vehicleProps = ESX.Game.GetVehicleProperties(vehicle)
                RageUI.Button(_U('make_double'), nil, {}, true, {
                    onSelected = function()
                        RageUI.CloseAll()
                        if distance ~= -1 and distance <= 3.0 then
                            TriggerServerEvent('esx_vehiclelock:preterkey', GetPlayerServerId(player), Menu.CarKeySelected)
                        end
                    end
                })
                RageUI.Button(_U('give_key'), nil, {}, true, {
                    onSelected = function()
                        RageUI.CloseAll()
                        if distance ~= -1 and distance <= 3.0 then
                            TriggerServerEvent('esx_vehiclelock:donnerkey', GetPlayerServerId(player), Menu.CarKeySelected)
                            TriggerServerEvent('esx_vehiclelock:deletekey', Menu.CarKeySelected)
                            TriggerServerEvent('esx_vehiclelock:changeowner', GetPlayerServerId(player), vehicleProps)
                        end
                    end
                })
                RageUI.Button(_U('drop'), nil, {RightBadge = RageUI.BadgeStyle.Alert}, true, {
                    onSelected = function()
                        RageUI.CloseAll()
                        TriggerServerEvent('esx_vehiclelock:deletekey', Menu.CarKeySelected)
                    end
                })
            end)
        end

        RageUI.IsVisible(RMenu:Get('submenu', 'vehicle'), function()
            local plyPed = PlayerPedId()
            RageUI.Button(_U('info_veh'), nil, {}, true, {}, RMenu:Get('submenu', 'vehinfo'))
            RageUI.Button(_U('engine_on_off'), nil, {}, true,{
                onSelected = function()
                    if not IsPedSittingInAnyVehicle(GetPlayerPed(-1)) then
                        Visual.Popup(_U'inside_veh')
                    elseif IsPedSittingInAnyVehicle(GetPlayerPed(-1)) then
                        local plyVeh = GetVehiclePedIsIn(plyPed, false)

                        if GetIsVehicleEngineRunning(plyVeh) then
                            SetVehicleEngineOn(plyVeh, false, false, true)
                            SetVehicleUndriveable(plyVeh, true)
                        elseif not GetIsVehicleEngineRunning(plyVeh) then
                            SetVehicleEngineOn(plyVeh, true, false, true)
                            SetVehicleUndriveable(plyVeh, false)
                        end
                    end
                end
            })
            RageUI.List(_U('open_door'), Menu.Vehicle.Door.List, Menu.Vehicle.Door.index or 1, nil, {}, true, {
                onListChange = function(index)
                    Menu.Vehicle.Door.index = index
                end,
                onSelected = function(index)
                    if not IsPedSittingInAnyVehicle(plyPed) then
                        Visual.Popup(_U('inside_veh'))
                    elseif IsPedSittingInAnyVehicle(plyPed) then
                        local plyVeh = GetVehiclePedIsIn(plyPed, false)

                        if index == 1 then
                            if not Menu.Vehicle.Door.State.FrontLeft then
                                Menu.Vehicle.Door.State.FrontLeft = true
                                SetVehicleDoorOpen(plyVeh, 0, false, false)
                            elseif  Menu.Vehicle.Door.State.FrontLeft then
                                Menu.Vehicle.Door.State.FrontLeft = false
                                SetVehicleDoorShut(plyVeh, 0, false, false)
                            end
                        elseif index == 2 then
                            if not Menu.Vehicle.Door.State.FrontRight then
                                Menu.Vehicle.Door.State.FrontRight = true
                                SetVehicleDoorOpen(plyVeh, 1, false, false)
                            elseif Menu.Vehicle.Door.State.FrontRight then
                                Menu.Vehicle.Door.State.FrontRight = false
                                SetVehicleDoorShut(plyVeh, 1, false, false)
                            end
                        elseif index == 3 then
                            if not Menu.Vehicle.Door.State.BackLeft then
                                Menu.Vehicle.Door.State.BackLeft = true
                                SetVehicleDoorOpen(plyVeh, 2, false, false)
                            elseif Menu.Vehicle.Door.State.BackLeft then
                                Menu.Vehicle.Door.State.BackLeft = false
                                SetVehicleDoorShut(plyVeh, 2, false, false)
                            end
                        elseif index == 4 then
                            if not Menu.Vehicle.Door.State.BackRight then
                                Menu.Vehicle.Door.State.BackRight = true
                                SetVehicleDoorOpen(plyVeh, 3, false, false)
                            elseif Menu.Vehicle.Door.State.BackRight then
                                Menu.Vehicle.Door.State.BackRight = false
                                SetVehicleDoorShut(plyVeh, 3, false, false)
                            end
                        end
                    end
                end
            })
            RageUI.List(_U('open_window'), Menu.Vehicle.Window.List, Menu.Vehicle.Window.index or 1, nil, {}, true, {
                onListChange = function(index)
                    Menu.Vehicle.Window.index = index
                end,
                onSelected = function(index)
                    print(index)
                    if not IsPedSittingInAnyVehicle(plyPed) then
                        Visual.Popup(_U('inside_veh'))
                    elseif IsPedSittingInAnyVehicle(plyPed) then
                        local plyVeh = GetVehiclePedIsIn(plyPed, false)
                        if index == 1 then
                            if not Menu.Vehicle.Window.State.FrontLeft then
                                Menu.Vehicle.Window.State.FrontLeft = true
                                RollDownWindow(plyVeh, 0)
                            elseif Menu.Vehicle.Window.State.FrontLeft then
                                Menu.Vehicle.Window.State.FrontLeft = false
                                RollUpWindow(plyVeh, 0)
                            end
                        elseif index == 2 then
                            if not Menu.Vehicle.Window.State.FrontRight then
                                Menu.Vehicle.Window.State.FrontRight = true
                                RollDownWindow(plyVeh, 1)
                            elseif Menu.Vehicle.Window.State.FrontRight then
                                Menu.Vehicle.Window.State.FrontRight = false
                                RollUpWindow(plyVeh, 1)
                            end
                        elseif index == 3 then
                            if not Menu.Vehicle.Window.State.BackLeft then
                                Menu.Vehicle.Window.State.BackLeft = true
                                RollDownWindow(plyVeh, 2)
                            elseif Menu.Vehicle.Window.State.BackLeft then
                                Menu.Vehicle.Window.State.BackLeft = false
                                RollUpWindow(plyVeh, 2)
                            end
                        elseif index == 4 then
                            if not Menu.Vehicle.Window.State.BackRight then
                                Menu.Vehicle.Window.State.BackRight = true
                                RollDownWindow(plyVeh, 3)
                            elseif Menu.Vehicle.Window.State.BackRight then
                                Menu.Vehicle.Window.State.BackRight = false
                                RollUpWindow(plyVeh, 3)
                            end
                        end
                    end
                end
            })
            RageUI.Button(_U('open_capot'), nil, {}, true, {
                onSelected = function()
                    if not IsPedSittingInAnyVehicle(plyPed) then
                        Visual.Popup(_U('inside_veh'))
                    elseif IsPedSittingInAnyVehicle(plyPed) then
                        local plyVeh = GetVehiclePedIsIn(plyPed, false)

                        if not Menu.Vehicle.Door.State.Hood then
                            Menu.Vehicle.Door.State.Hood = true
                            SetVehicleDoorOpen(plyVeh, 4, false, false)
                        elseif Menu.Vehicle.Door.State.Hood then
                            Menu.Vehicle.Door.State.Hood = false
                            SetVehicleDoorShut(plyVeh, 4, false, false)
                        end
                    end
                end
            })
            RageUI.Button(_U('open_trunk'), nil, {}, true, {
                onSelected = function()
                    if not IsPedSittingInAnyVehicle(plyPed) then
                        Visual.Popup(_U('inside_veh'))
                    elseif IsPedSittingInAnyVehicle(plyPed) then
                        local plyVeh = GetVehiclePedIsIn(plyPed, false)

                        if not Menu.Vehicle.Door.State.Trunk then
                            Menu.Vehicle.Door.State.Trunk = true
                            SetVehicleDoorOpen(plyVeh, 5, false, false)
                        elseif Menu.Vehicle.Door.State.Trunk then
                            Menu.Vehicle.Door.State.Trunk = false
                            SetVehicleDoorShut(plyVeh, 5, false, false)
                        end
                    end
                end
            })
        end)
        RageUI.IsVisible(RMenu:Get('submenu', 'vehinfo'), function()
            Menu.Vehicle.Info.Engine.Data = GetVehicleEngineHealth(GetVehiclePedIsIn(GetPlayerPed(-1)))
            if Menu.Vehicle.Info.Engine.Data >= 750 then
                Menu.Vehicle.Info.Engine.State = Menu.Vehicle.Info.Engine.ActualState[1]
            elseif Menu.Vehicle.Info.Engine.Data < 750 and Menu.Vehicle.Info.Engine.Data >= 250 then
                Menu.Vehicle.Info.Engine.State = Menu.Vehicle.Info.Engine.ActualState[2]
            elseif Menu.Vehicle.Info.Engine.Data < 250 then
                Menu.Vehicle.Info.Engine.State = Menu.Vehicle.Info.Engine.ActualState[3]
            else
                Menu.Vehicle.Info.Engine.State = Menu.Vehicle.Info.Engine.ActualState[4]
            end
            Menu.Vehicle.Info.Body.Data = GetVehicleBodyHealth(GetVehiclePedIsIn(GetPlayerPed(-1)))
            if Menu.Vehicle.Info.Body.Data >= 750 then
                Menu.Vehicle.Info.Body.State = Menu.Vehicle.Info.Body.ActualState[1]
            elseif Menu.Vehicle.Info.Body.Data < 750 and Menu.Vehicle.Info.Body.Data >= 250 then
                Menu.Vehicle.Info.Body.State = Menu.Vehicle.Info.Body.ActualState[2]
            elseif Menu.Vehicle.Info.Body.Data < 250 then
                Menu.Vehicle.Info.Body.State = Menu.Vehicle.Info.Body.ActualState[3]
            else
                Menu.Vehicle.Info.Body.State = Menu.Vehicle.Info.Body.ActualState[4]
            end
            Menu.Vehicle.Info.Tank.Data = GetVehiclePetrolTankHealth(GetVehiclePedIsIn(GetPlayerPed(-1)))
            if Menu.Vehicle.Info.Tank.Data >= 750 then
                Menu.Vehicle.Info.Tank.State = Menu.Vehicle.Info.Tank.ActualState[1]
            elseif Menu.Vehicle.Info.Tank.Data < 750 and Menu.Vehicle.Info.Tank.Data >= 250 then
                Menu.Vehicle.Info.Tank.State = Menu.Vehicle.Info.Tank.ActualState[2]
            elseif Menu.Vehicle.Info.Tank.Data < 250 then
                Menu.Vehicle.Info.Tank.State = Menu.Vehicle.Info.Tank.ActualState[3]
            else
                Menu.Vehicle.Info.Tank.State = Menu.Vehicle.Info.Tank.ActualState[4]
            end
            --
            local playerPed = GetPlayerPed(-1)
            local playerVeh = GetVehiclePedIsIn(playerPed)
            local vehicle = ESX.Game.GetVehicleProperties(playerVeh)
            local model = vehicle.model
            local class = GetVehicleClassFromName(model)
            local classLabel = ''
            if class == 0 then
                classLabel = _U('compact')
            elseif class == 1 then
                classLabel = _U('sedan')
            elseif class == 2 then
                classLabel = _U('suv')
            elseif class == 3 then
                classLabel = _U('coupe')
            elseif class == 4 then
                classLabel = _U('muscle')
            elseif class == 5 then
                classLabel = _U('sportclassic')
            elseif class == 6 then
                classLabel = _U('sports')
            elseif class == 7 then
                classLabel = _U('super')
            elseif class == 8 then
                classLabel = _U('motorbike')
            elseif class == 9 then
                classLabel = _U('offroad')
            elseif class == 10 then
                classLabel = _U('industrial')
            elseif class == 11 then
                classLabel = _U('util')
            elseif class == 12 then
                classLabel = _U('van')
            elseif class == 13 then
                classLabel = _U('bike')
            elseif class == 14 then
                classLabel = _U('boat')
            elseif class == 15 then
                classLabel = _U('heli')
            elseif class == 16 then
                classLabel = _U('plane')
            elseif class == 17 then
                classLabel = _U('service')
            elseif class == 18 then
                classLabel = _U('emergency')
            elseif class == 19 then
                classLabel = _U('army')
            elseif class == 20 then
                classLabel = _U('commercial')
            elseif class == 21 then
                classLabel = _U('train')
            end
            local vehicleData = {
                label = GetLabelText(GetDisplayNameFromVehicleModel(model)),
                fuel = ESX.Math.Round(GetVehicleFuelLevel(playerVeh)),
                class = classLabel,
                maxPassenger = GetVehicleMaxNumberOfPassengers(playerVeh),
                plate = GetVehicleNumberPlateText(playerVeh),
            }
            RageUI.Button(_U('veh_name'), nil, {RightLabel = vehicleData.label}, true, {})
            RageUI.Button(_U('class_name'), nil, {RightLabel = vehicleData.class}, true, {})
            RageUI.Button(_U('plate_number'), nil, {RightLabel = vehicleData.plate}, true, {})
            RageUI.Button(_U('oil'), nil, {RightLabel = vehicleData.fuel.."%"}, true, {})
            RageUI.Button(_U('seat'), nil, {RightLabel = vehicleData.maxPassenger}, true, {})
            RageUI.Button(_U('engine_state'), nil, {RightLabel = Menu.Vehicle.Info.Engine.State}, true, {})
            RageUI.Button(_U('body_state'), nil, {RightLabel = Menu.Vehicle.Info.Body.State}, true, {})
            RageUI.Button(_U('tank_state'), nil, {RightLabel = Menu.Vehicle.Info.Tank.State}, true, {})
        end)

        RageUI.IsVisible(RMenu:Get('submenu', 'society'), function()
            RefreshMoney()
            if societymoney ~= nil then
                RageUI.Button(_U('society_bank'), nil, {RightLabel = "~g~"..societymoney.."$"}, true, {})
            end
            RageUI.Button(_U('recruit'), nil, {}, true, {
                onSelected = function()
                    if ESX.PlayerData.job.grade_name == 'boss' then
                        local closestPlayer, closestDistance = ESX.Game.GetClosestPlayer()

                        if closestPlayer == -1 or closestDistance > 3.0 then
                            Visual.Popup(_U('nobody'))
                        else
                            TriggerServerEvent('PA_menuperso:recruterplayer', GetPlayerServerId(closestPlayer), ESX.PlayerData.job.name, 0)
                        end
                    end
                end
            })
            RageUI.Button(_U('fire'), nil, {}, true, {
                onSelected = function()
                    if ESX.PlayerData.job.grade_name == 'boss' then
                        local closestPlayer, closestDistance = ESX.Game.GetClosestPlayer()

                        if closestPlayer == -1 or closestDistance > 3.0 then
                            Visual.Popup(_U('nobody'))
                        else
                            TriggerServerEvent('PA_menuperso:virerplayer', GetPlayerServerId(closestPlayer))
                        end
                    end
                end
            })
            RageUI.Button(_U('promote'), nil, {}, true, {
                onSelected = function()
                    if ESX.PlayerData.job.grade_name == 'boss' then
                        local closestPlayer, closestDistance = ESX.Game.GetClosestPlayer()

                        if closestPlayer == -1 or closestDistance > 3.0 then
                            Visual.Popup(_U('nobody'))
                        else
                            TriggerServerEvent('PA_menuperso:promouvoirplayer', GetPlayerServerId(closestPlayer))
                        end
                    end
                end
            })
            RageUI.Button(_U('retrograde'), nil, {}, true, {
                onSelected = function()
                    if ESX.PlayerData.job.grade_name == 'boss' then
                        local closestPlayer, closestDistance = ESX.Game.GetClosestPlayer()

                        if closestPlayer == -1 or closestDistance > 3.0 then
                            Visual.Popup(_U('nobody'))
                        else
                            TriggerServerEvent('PA_menuperso:destituerplayer', GetPlayerServerId(closestPlayer))
                        end
                    else
                        Visual.Popup("Vous n'avez pas les ~r~droits~w~")
                    end
                end
            })
        end)

        if Config.doubleJob then
            RageUI.IsVisible(RMenu:Get('submenu', 'gang'), function()
                RefreshMoney2()
                if societymoney2 ~= nil then
                    RageUI.Button(_U('gang_bank'), nil, {RightLabel = "~g~"..societymoney2.."$"}, true, {})
                end
                RageUI.Button(_U('recruit'), nil, {}, true, {
                    onSelected = function()
                        if ESX.PlayerData.job2.grade_name == 'boss' then
                            local closestPlayer, closestDistance = ESX.Game.GetClosestPlayer()

                            if closestPlayer == -1 or closestDistance > 3.0 then
                                Visual.Popup(_U('nobody'))
                            else
                                TriggerServerEvent('PA_menuperso:recruterplayer2', GetPlayerServerId(closestPlayer), ESX.PlayerData.job2.name, 0)
                            end
                        end
                    end
                })
                RageUI.Button(_U('promote'), nil, {}, true, {
                    onSelected = function()
                        if ESX.PlayerData.job2.grade_name == 'boss' then
                            local closestPlayer, closestDistance = ESX.Game.GetClosestPlayer()

                            if closestPlayer == -1 or closestDistance > 3.0 then
                                Visual.Popup(_U('nobody'))
                            else
                                TriggerServerEvent('PA_menuperso:virerplayer2', GetPlayerServerId(closestPlayer))
                            end
                        end
                    end
                })
                RageUI.Button(_U('promote'), nil, {}, true, {
                    onSelected = function()
                        if ESX.PlayerData.job2.grade_name == 'boss' then
                            local closestPlayer, closestDistance = ESX.Game.GetClosestPlayer()

                            if closestPlayer == -1 or closestDistance > 3.0 then
                                Visual.Popup(_U('nobody'))
                            else
                                TriggerServerEvent('PA_menuperso:promouvoirplayer2', GetPlayerServerId(closestPlayer))
                            end
                        end
                    end
                })
                RageUI.Button(_U('retrograde'), nil, {}, true, {
                    onSelected = function()
                        if ESX.PlayerData.job2.grade_name == 'boss' then
                            local closestPlayer, closestDistance = ESX.Game.GetClosestPlayer()

                            if closestPlayer == -1 or closestDistance > 3.0 then
                                Visual.Popup(_U('nobody'))
                            else
                                TriggerServerEvent('PA_menuperso:destituerplayer2', GetPlayerServerId(closestPlayer))
                            end
                        end
                    end
                })
            end)
        end

        RageUI.IsVisible(RMenu:Get('submenu', 'settings'), function()
            RageUI.Separator(_U('color_settings'))
            RageUI.List(_U('red'), Menu.Settings.color.red, Menu.Settings.color.indexRed or 1, nil, {}, true, {
                onListChange = function(index)
                    Menu.Settings.color.indexRed = index
                    RMenu:Get('submenu', 'settings'):SetRectangleBanner(Menu.Settings.color.indexRed-1, Menu.Settings.color.indexGreen-1, Menu.Settings.color.indexBlue-1, Menu.Settings.color.indexAlpha-1)
                end,
                onSelected = function()
                    local post, red = CheckQuantity(KeyboardInput(_U('red'), '', 3))
                    if post then
                        if red ~= nil then
                            Menu.Settings.color.indexRed = red + 1
                            RMenu:Get('submenu', 'settings'):SetRectangleBanner(Menu.Settings.color.indexRed-1, Menu.Settings.color.indexGreen-1, Menu.Settings.color.indexBlue-1, Menu.Settings.color.indexAlpha-1)
                        end
                    end
                end
            })
            RageUI.List(_U('green'), Menu.Settings.color.green, Menu.Settings.color.indexGreen or 1, nil, {}, true, {
                onListChange = function(index)
                    Menu.Settings.color.indexGreen = index
                    RMenu:Get('submenu', 'settings'):SetRectangleBanner(Menu.Settings.color.indexRed-1, Menu.Settings.color.indexGreen-1, Menu.Settings.color.indexBlue-1, Menu.Settings.color.indexAlpha-1)
                end,
                onSelected = function()
                    local post, green = CheckQuantity(KeyboardInput(_U('red'), '', 3))
                    if post then
                        if green ~= nil then
                            Menu.Settings.color.indexGreen = green + 1
                            RMenu:Get('submenu', 'settings'):SetRectangleBanner(Menu.Settings.color.indexRed-1, Menu.Settings.color.indexGreen-1, Menu.Settings.color.indexBlue-1, Menu.Settings.color.indexAlpha-1)
                        end
                    end
                end
            })
            RageUI.List(_U('blue'), Menu.Settings.color.blue, Menu.Settings.color.indexBlue or 1, nil, {}, true, {
                onListChange = function(index)
                    Menu.Settings.color.indexBlue = index
                    RMenu:Get('submenu', 'settings'):SetRectangleBanner(Menu.Settings.color.indexRed-1, Menu.Settings.color.indexGreen-1, Menu.Settings.color.indexBlue-1, Menu.Settings.color.indexAlpha-1)
                end,
                onSelected = function()
                    local post, blue = CheckQuantity(KeyboardInput(_U('red'), '', 3))
                    if post then
                        if blue ~= nil then
                            Menu.Settings.color.indexBlue = blue + 1
                            RMenu:Get('submenu', 'settings'):SetRectangleBanner(Menu.Settings.color.indexRed-1, Menu.Settings.color.indexGreen-1, Menu.Settings.color.indexBlue-1, Menu.Settings.color.indexAlpha-1)
                        end
                    end
                end
            })
            RageUI.List(_U('alpha'), Menu.Settings.color.alpha, Menu.Settings.color.indexAlpha or 1, nil, {}, true, {
                onListChange = function(index)
                    Menu.Settings.color.indexAlpha = index
                    RMenu:Get('submenu', 'settings'):SetRectangleBanner(Menu.Settings.color.indexRed-1, Menu.Settings.color.indexGreen-1, Menu.Settings.color.indexBlue-1, Menu.Settings.color.indexAlpha-1)
                end,
                onSelected = function()
                    local post, alpha = CheckQuantity(KeyboardInput(_U('red'), '', 3))
                    if post then
                        if alpha ~= nil then
                            Menu.Settings.color.indexAlpha = alpha + 1
                            RMenu:Get('submenu', 'settings'):SetRectangleBanner(Menu.Settings.color.indexRed-1, Menu.Settings.color.indexGreen-1, Menu.Settings.color.indexBlue-1, Menu.Settings.color.indexAlpha-1)
                        end
                    end
                end
            })
            RageUI.Separator(_U('size'))
            RageUI.List(_U('menu_size'), Menu.Settings.size, Menu.Settings.indexSize, nil, {}, true, {
                onListChange = function(index, item)
                    Menu.Settings.indexSize = index
                    if item == "NativeUI" then
                        RMenu:Get('submenu', 'settings'):SetStyleSize(0)
                        Menu.Settings.currentSize = 0
                    elseif item == "RageUI" then
                        RMenu:Get('submenu', 'settings'):SetStyleSize(100)
                        Menu.Settings.currentSize = 100
                    end
                end
            })
            RageUI.Button(_U('confirm'), nil, {}, true, {
                onSelected = function()
                    table.remove(menuParam, 1)
                    table.insert(menuParam, {
                        color = {
                            r = Menu.Settings.color.indexRed - 1,
                            g = Menu.Settings.color.indexGreen - 1,
                            b = Menu.Settings.color.indexBlue - 1,
                            a = Menu.Settings.color.indexAlpha - 1
                        },
                        size = Menu.Settings.currentSize
                    })
                    for k,_ in pairs(RMenu:GetType('main')) do
                        RMenu:GetType('main')[k].Menu:SetRectangleBanner(Menu.Settings.color.indexRed-1, Menu.Settings.color.indexGreen-1, Menu.Settings.color.indexBlue-1, Menu.Settings.color.indexAlpha-1)
                        RMenu:GetType('main')[k].Menu:SetStyleSize(menuParam[1].size)
                    end
                    for k,_ in pairs(RMenu:GetType('submenu')) do
                        RMenu:GetType('submenu')[k].Menu:SetRectangleBanner(Menu.Settings.color.indexRed-1, Menu.Settings.color.indexGreen-1, Menu.Settings.color.indexBlue-1, Menu.Settings.color.indexAlpha-1)
                        RMenu:GetType('submenu')[k].Menu:SetStyleSize(menuParam[1].size)
                    end
                    SetResourceKvp("menuParam", json.encode(menuParam))
                end
            })
            RageUI.Button(_U('reset'), nil, {}, true, {
                onSelected = function()
                    table.remove(menuParam, 1)
                    DeleteResourceKvp("menuParam")
                    for k,_ in pairs(RMenu:GetType('main')) do
                        RMenu:GetType('main')[k].Menu:SetSpriteBanner()
                        RMenu:GetType('main')[k].Menu:SetRectangleBanner()
                        RMenu:GetType('main')[k].Menu:SetStyleSize(0)
                    end
                    for k,_ in pairs(RMenu:GetType('submenu')) do
                        RMenu:GetType('submenu')[k].Menu:SetSpriteBanner()
                        RMenu:GetType('submenu')[k].Menu:SetStyleSize(0)
                    end
                end
            })
        end, function()
            RageUI.PercentagePanel(Menu.Settings.sizeCustom, _U('size_percent'), "NativeUI", "RageUI", {
                onProgressChange = function(percent)
                    Menu.Settings.sizeCustom = percent
                    RMenu:Get('submenu', 'settings'):SetStyleSize(percent*100)
                    Menu.Settings.currentSize = percent * 100
                end
            }, 7)
        end)

        RageUI.IsVisible(RMenu:Get('submenu', 'admin'), function()
            RageUI.Button(_U('tp'), nil, {}, true, {}, RMenu:Get('submenu', 'admintp'))
            RageUI.Button(_U('player'), nil, {}, true, {}, RMenu:Get('submenu', 'adminplayer'))
            RageUI.Button(_U('item_list'), nil, {}, true, {}, RMenu:Get('submenu', 'adminitem'))
            RageUI.Button(_U('job_list'), nil, {}, true, {}, RMenu:Get('submenu', 'adminjob'))
            if Config.doubleJob then
                RageUI.Button(_U('gang_list'), nil, {}, true, {}, RMenu:Get('submenu', 'admingang'))
            end
            RageUI.Button(_U('vehicle'), nil, {}, true, {}, RMenu:Get('submenu', 'admincar'))
            RageUI.Button(_U('other'), nil, {}, true, {}, RMenu:Get('submenu', 'adminmisc'))
        end)
        RageUI.IsVisible(RMenu:Get('submenu', 'admintp'), function()
            RageUI.Button(_U('summon'), nil, {}, true, {
                onSelected = function()
                    local post, id = CheckQuantity(KeyboardInput(_U('enter_id'), '', 5))
                    if post then
                        if id ~= nil and id ~= GetPlayerFromServerId(GetPlayerPed(-1)) then
                            local targetPlayer = GetPlayerFromServerId(tonumber(id))
                            local playerPedCoords = GetEntityCoords(GetPlayerPed(-1))
                            SetEntityCoords(targetPlayer, playerPedCoords)
                        end
                    else
                        Visual.Popup(_U('invalid_entry'))
                    end
                end
            })
            RageUI.Button(_U('marker'), nil, {}, true, {
                onSelected = function()
                    local WaypointHandle = GetFirstBlipInfoId(8)
                    if DoesBlipExist(WaypointHandle) then
                        local coord = GetBlipInfoIdCoord(WaypointHandle)
                        SetEntityCoordsNoOffset(PlayerPedId(), coord.x, coord.y, -199.5, false, false, false, true)
                        Visual.Popup(_U('tp_on_marker'))
                    else
                        Visual.Popup(_U('no_marker'))
                    end
                end
            })
            RageUI.Button(_U('goto'), nil, {}, true, {
                onSelected = function()
                    local post, id = CheckQuantity(KeyboardInput(_U('enter_id'), '', 5))
                    if post then
                        if id ~= nil and id ~= GetPlayerFromServerId(GetPlayerPed(-1)) then
                            local targetPlayer = GetPlayerFromServerId(tonumber(id))
                            local playerPedCoords = GetEntityCoords(GetPlayerPed(-1))
                            SetEntityCoords(playerPedCoords, targetPlayer)
                        end
                    else
                        Visual.Popup(_U('invalid_entry'))
                    end
                end
            })
            RageUI.Button(_U('coord'), nil, {}, true, {
                onSelected = function()
                    local x = KeyboardInput("X", '', 10)
                    if x ~= nil then
                        local y = KeyboardInput("Y", '', 10)
                        if y ~= nil then
                            local z = KeyboardInput("Z", '', 10)
                            if z ~= nil then
                                SetEntityCoords(GetPlayerPed(-1), x + 0.001, y + 0.001, z + 0.001)
                            end
                        end
                    end
                end
            })
        end)
        RageUI.IsVisible(RMenu:Get('submenu', 'adminplayer'), function()
            RageUI.Checkbox(_U('noclip'), nil, Menu.admin.noClip, {}, {
                onSelected = function(index)
                    Menu.admin.noClip = index
                    admin_no_clip(Menu.admin.noClip)
                end
            })
           RageUI.Checkbox(_U('god'), nil, Menu.admin.godMode, {}, {
                onSelected = function(index)
                    Menu.admin.godMode = index
                    SetEntityInvincible(PlayerPedId(), Menu.admin.godMode)
                end
            })
            RageUI.Checkbox(_U('ghost'), nil, Menu.admin.ghostMode, {}, {
                onSelected = function(index)
                    Menu.admin.ghostMode = index
                    SetEntityVisible(PlayerPedId(), not Menu.admin.ghostMode, false)
                end
            })
        end)
        RageUI.IsVisible(RMenu:Get('submenu', 'adminitem'), function()
            for i=1, #ESX.PlayerData.inventory, 1 do
                local label = ESX.PlayerData.inventory[i].label
                local desc = _U('item_list_desc', ESX.PlayerData.inventory[i].name, tonumber(ESX.PlayerData.inventory[i].weight/1000))
                RageUI.Button(label, desc, {}, true, {
                    onSelected = function()
                        local post, quantity = CheckQuantity(KeyboardInput(_U('quantity'), '', 7))
                        if post then
                            if quantity ~= nil and quantity > 0 then
                                ESX.TriggerServerCallback('PA_menuperso:giveItem', function(give)
                                    if give and name ~= nil then
                                        Visual.Popup(_U('give_item', quantity, label))
                                    end
                                end, ESX.PlayerData.inventory[i].name, quantity)
                            else
                                Visual.Popup(_U('invalid_quantity'))
                            end
                        else
                            Visual.Popup(_U('invalid_entry'))
                        end
                    end
                })
            end
        end)
        RageUI.IsVisible(RMenu:Get('submenu', 'adminjob'), function()
            ESX.TriggerServerCallback('PA_menuperso:getJob', function(joblist)
                jobList = joblist
            end)
            for i=1, #jobList, 1 do
                RageUI.Button(jobList[i].label, jobList[i].name, {}, true, {
                    onSelected = function()
                        ESX.TriggerServerCallback('PA_menuperso:getgrade', function(gradelist)
                            grade = gradelist
                            selectedJob = jobList[i]
                        end, jobList[i].name)
                    end
                }, RMenu:Get('submenu', 'adminjobgrade'))
            end
        end)
        RageUI.IsVisible(RMenu:Get('submenu', 'adminjobgrade'), function()
            for i=1, #grade, 1 do
                RageUI.Button(grade[i].label, _U('grade_list_desc', grade[i].name, grade[i].grade), {}, true, {
                    onSelected = function()
                        TriggerServerEvent('PA_menuperso:setjob', selectedJob.name, grade[i].grade)
                        Visual.Popup(_U('new_grad_notif', grade[i].label, selectedJob.label))
                    end
                })
            end
        end)
        if Config.doubleJob then
            RageUI.IsVisible(RMenu:Get('submenu', 'admingang'), function()
                ESX.TriggerServerCallback('PA_menuperso:getJob', function(joblist)
                    jobList = joblist
                end)
                for i=1, #jobList, 1 do
                    RageUI.Button(jobList[i].label, jobList[i].name, {}, true, {
                        onSelected = function()
                            ESX.TriggerServerCallback('PA_menuperso:getgrade', function(gradelist)
                                grade = gradelist
                                selectedJob = jobList[i]
                            end, jobList[i].name)
                        end
                    }, RMenu:Get('submenu', 'adminganggrade'))
                end
            end)
            RageUI.IsVisible(RMenu:Get('submenu', 'adminganggrade'), function()
                for i=1, #grade, 1 do
                    RageUI.Button(grade[i].label, _U('grade_list_desc', grade[i].name, grade[i].grade), {}, true, {
                        onSelected = function()
                            TriggerServerEvent('PA_menuperso:setjob2', selectedJob.name, grade[i].grade)
                            Visual.Popup(_U('new_grad_notif', grade[i].label, selectedJob.label))
                        end
                    })
                end
            end)
        end
        RageUI.IsVisible(RMenu:Get('submenu', 'admincar'), function()
            local playerPed = GetPlayerPed(-1)
            local playerVeh = GetVehiclePedIsIn(playerPed)
            RageUI.Button(_U('repair_veh'), nil, {}, true, {
                onSelected = function()
                    local ped = GetPlayerPed(-1)
                    local car = GetVehiclePedIsUsing(ped)

                    SetVehicleFixed(car)
                    SetVehicleDirtLevel(car, 0.0)
                end
            })
            RageUI.Button(_U('spawn_veh'), nil, {}, true, {
                onSelected = function()
                    local carName = KeyboardInput(_U('car_name'), 'elegy', 20)
                    if carName ~= nil then
                        RequestModel(carName)
                        while not HasModelLoaded(carName) do
                            Citizen.Wait(0)
                        end
                        ESX.Game.SpawnVehicle(carName, GetEntityCoords(PlayerPedId()), GetEntityHeading(PlayerPedId()), function(vehicle)
                            TaskWarpPedIntoVehicle(PlayerPedId(), vehicle, -1)
                        end)
                    end
                end
            })
            RageUI.Button(_U('flip_veh'), nil, {}, true, {
                onSelected = function()
                    local player = GetPlayerPed(-1)
                    local posdepmenu = GetEntityCoords(player)
                    local carTargetDep = GetClosestVehicle(posdepmenu['x'], posdepmenu['y'], posdepmenu['z'], 10.0,0,70)
                    if carTargetDep ~= nil then
                        platecarTargetDep = GetVehicleNumberPlateText(carTargetDep)
                    end
                    local playerCoords = GetEntityCoords(GetPlayerPed(-1))
                    playerCoords = playerCoords + vector3(0, 2, 0)

                    SetEntityCoords(carTargetDep, playerCoords)

                    Visual.Popup(_U('veh_fliped'))
                end
            })
            RageUI.Button(_U('give_admin_key'), nil, {}, true, {
                onSelected = function()
                    local vehicle = GetVehiclePedIsIn( GetPlayerPed(-1), false )
                    local plaque = GetVehicleNumberPlateText(vehicle)


                    if GetPedInVehicleSeat( vehicle, -1 ) == GetPlayerPed(-1) then
                        TriggerServerEvent('esx_vehiclelock:registerkey', plaque, GetPlayerServerId(closestPlayer))
                    else
                        Visual.Popup(_U('inside_veh'))
                    end
                end
            })
            RageUI.Button(_U('owned_veh'), nil, {}, true, {
                onSelected = function()
                    if IsPedSittingInAnyVehicle(playerPed) then
                        local vehicleProps = ESX.Game.GetVehicleProperties(playerVeh)
                        TriggerServerEvent('PA_VehShop:setVehicleOwned', vehicleProps)
                    end
                end
            })
            RageUI.Button(_U('refuel'), nil, {}, true, {
                onSelected = function()
                    local vehicle = GetVehiclePedIsIn(GetPlayerPed(-1), false)
                    SetVehicleFuelLevel(vehicle, 100.0)
                end
            })
            RageUI.Button(_U('go_fast'), nil, {}, true, {
                onSelected = function()
                    SetVehicleMaxSpeed(playerVeh, 999.0)
                    SetVehicleForwardSpeed(playerVeh, 999.0)
                end
            })
        end)
        RageUI.IsVisible(RMenu:Get('submenu', 'adminmisc'), function()
            RageUI.Button(_U('give_money'), nil, {}, true, {
                onSelected = function()
                    local post, amount = CheckQuantity(KeyboardInput(_U('amount'), '', 20))
                    if post then
                        if amount > 0 and amount ~= nil then
                            TriggerServerEvent('AdminMenu:giveCash', amount)
                        end
                    end
                end
            })
            RageUI.Button(_U('give_bank'), nil, {}, true, {
                onSelected = function()
                    local post, amount = CheckQuantity(KeyboardInput(_U('amount'), '', 20))
                    if post then
                        if amount > 0 and amount ~= nil then
                            TriggerServerEvent('AdminMenu:giveBank', amount)
                        end
                    end
                end
            })
            RageUI.Button(_U('give_black'), nil, {}, true, {
                onSelected = function()
                    local post, amount = CheckQuantity(KeyboardInput(_U('amount'), '', 20))
                    if post then
                        if amount > 0 and amount ~= nil then
                            TriggerServerEvent('AdminMenu:giveDirtyMoney', amount)
                        end
                    end
                end
            })
            RageUI.Checkbox(_U('show_coord'), nil, Menu.admin.coords, {}, {
                onSelected = function(index)
                    Menu.admin.coords = index
                end
            })
            RageUI.Checkbox(_U('show_name'), nil, Menu.admin.showName, {}, {
                onSelected = function(index)
                    Menu.admin.showName = index
                end,
                onChecked = function()
                    Visual.Popup(_U('notif_playername'))
                end,
                onUnChecked = function()
                    Visual.Popup(_U('notif_playername'))
                end
            })
            RageUI.Button(_U('change_skin'), nil, {}, true, {
                onSelected = function()
                    RageUI.CloseAll()
                    TriggerEvent('esx_skin:openSaveableMenu')
                end
            })
            RageUI.Button(_U('save_skin'), nil, {}, true, {
                onSelected = function()
                    RageUI.CloseAll()
                    TriggerEvent('skinchanger:getSkin', function(skin)
                        TriggerServerEvent('esx_skin:save', skin)
                    end)
                end
            })
        end)
    end
end)

---Function
function setHUD(value)

    if value == 'showHUD' then
        SendNUIMessage({openCinema = false})
        DisplayRadar(true)
        TriggerEvent('ui:display', true)
        TriggerEvent('PA_menuperso:hideRadar', false)
    elseif value == 'hideHUD' then
        SendNUIMessage({openCinema = false})
        TriggerEvent('esx_status:setDisplay', 0.0)
        DisplayRadar(false)
        TriggerEvent('ui:display', false)
    elseif value == 'cinematique' then
        SendNUIMessage({openCinema = true})
        DisplayRadar(false)
        TriggerEvent('ui:display', false)
        TriggerEvent('PA_menuperso:hideRadar', true)
    end

end

function KeyboardInput(TextEntry, ExampleText, MaxStringLength)
    AddTextEntry("FMMC_KEY_TIP1", TextEntry .. "")
    DisplayOnscreenKeyboard(1, "FMMC_KEY_TIP1", "", ExampleText, "", "", "", MaxStringLength)
    blockinput = true

    while UpdateOnscreenKeyboard() ~= 1 and UpdateOnscreenKeyboard() ~= 2 do
        Citizen.Wait(0)
    end

    if UpdateOnscreenKeyboard() ~= 2 then
        local result = GetOnscreenKeyboardResult()
        Citizen.Wait(500)
        blockinput = false
        return result
    else
        Citizen.Wait(500)
        blockinput = false
        return nil
    end
end

function CheckQuantity(number)
    number = tonumber(number)

    if type(number) == 'number' then
        number = number

        if number > 0 then
            return true, number
        end
    end

    return false, number
end

function RefreshMoney()
    if ESX.PlayerData.job ~= nil and ESX.PlayerData.job.grade_name == 'boss' then
        ESX.TriggerServerCallback('esx_society:getSocietyMoney', function(money)
            UpdateSocietyMoney(money)
        end, ESX.PlayerData.job.name)
    end
end

function UpdateSocietyMoney(money)
    societymoney = ESX.Math.GroupDigits(money)
end

if Config.doubleJob then
    function RefreshMoney2()
        if ESX.PlayerData.job2 ~= nil and ESX.PlayerData.job2.grade_name == 'boss' then
            ESX.TriggerServerCallback('esx_society:getSocietyMoney', function(money)
                UpdateSociety2Money(money)
            end, ESX.PlayerData.job2.name)
        end
    end
    function UpdateSociety2Money(money)
        societymoney2 = ESX.Math.GroupDigits(money)
    end
end

---Noclip
local noclip = false
local noclip_speed = 1.0

function admin_no_clip(noclipState)
    local ped = GetPlayerPed(-1)
    noclip = noclipState
    if noclip then -- activé
        SetEntityInvincible(ped, true)
        SetEntityVisible(ped, false, false)
        Visual.Popup(_U('no_clip_on'))
    else -- désactivé
        SetEntityInvincible(ped, false)
        SetEntityVisible(ped, true, false)
        Visual.Popup(_U('no_clip_off'))
    end
end

function getPosition()
    local x,y,z = table.unpack(GetEntityCoords(GetPlayerPed(-1),true))
    return x,y,z
end

function getCamDirection()
    local heading = GetGameplayCamRelativeHeading()+GetEntityHeading(GetPlayerPed(-1))
    local pitch = GetGameplayCamRelativePitch()

    local x = -math.sin(heading*math.pi/180.0)
    local y = math.cos(heading*math.pi/180.0)
    local z = math.sin(pitch*math.pi/180.0)

    local len = math.sqrt(x*x+y*y+z*z)
    if len ~= 0 then
        x = x/len
        y = y/len
        z = z/len
    end

    return x,y,z
end

-- noclip/invisible
Citizen.CreateThread(function()
    while true do
        Citizen.Wait(0)
        if noclip then
            local ped = GetPlayerPed(-1)
            local x,y,z = getPosition()
            local dx,dy,dz = getCamDirection()
            local speed = noclip_speed

            -- reset du velocity
            SetEntityVelocity(ped, 0.0001, 0.0001, 0.0001)

            -- aller vers le haut
            if IsControlPressed(0,32) then -- MOVE UP
                x = x+speed*dx
                y = y+speed*dy
                z = z+speed*dz
            end

            -- aller vers le bas
            if IsControlPressed(0,269) then -- MOVE DOWN
                x = x-speed*dx
                y = y-speed*dy
                z = z-speed*dz
            end

            SetEntityCoordsNoOffset(ped,x,y,z,true,true,true)
        end
    end
end)

---Show coord
Citizen.CreateThread(function()
    while true do
        Citizen.Wait(0)
        if Menu.admin.coords then
            local playerPos = GetEntityCoords(GetPlayerPed(-1))
            local playerHeading = GetEntityHeading(GetPlayerPed(-1))
            Visual.Subtitle(_U('coords', playerPos.x, playerPos.y, playerPos.z, playerHeading))
        end
    end
end)

---Show name
Citizen.CreateThread(function()
    while true do
        Citizen.Wait(0)
        for _,id in ipairs(GetActivePlayers()) do
            if Menu.admin.showName then
                if NetworkIsPlayerActive(id) and GetPlayerPed(id) ~= GetPlayerPed(-1) then
                    ped = GetPlayerPed(id)
                    headId = CreateFakeMpGamerTag(ped, (GetPlayerServerId( id )..' - '..GetPlayerName( id )), 0, 0, "", 0)
                end
            else
                if NetworkIsPlayerActive(id) and GetPlayerPed(id) ~= GetPlayerPed(-1) then
                    ped = GetPlayerPed(id)
                    headId = CreateFakeMpGamerTag(ped, '', 0, 0, "", 0)
                end
            end
        end
    end
end)